# -*- coding: utf-8 -*-
"""SARIMAX_Colombia.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZhElAO_ywMMER69ogNuypH-Vw43V7aH_
"""

pip install pmdarima

from statsmodels.tsa.arima_model import ARIMA
import pmdarima  as pm
import os

import pandas as pd
df = pd.read_excel("data_col2.xlsx")

df.rename(columns = {"GDP, real, LCU":"actual_gdp"}, inplace = True)
df.head()

datos = df[['year','quarter','actual_gdp']]  
datos

datos['time']=pd.to_datetime(datos['year'].astype(str) + 'Q' + datos['quarter'].astype(str))
datos

# Indexar la serie por la fecha
SerieTiempo = datos.set_index('time')
SerieTiempo

import pandas as pd
import numpy as np
import statsmodels.api as sm
import statsmodels.stats.api as sms
import matplotlib.pyplot as plt

# Vamos a crear otra columna: log del PIB
# El logaritmo disminuye la varianza de la serie, lo que facilita la estimación del modelo
SerieTiempo['LPIB'] = np.log(SerieTiempo['actual_gdp'])
SerieTiempo

# Gráfico de la serie PIB
plt.figure(figsize=(18,5))
plt.title('PIB', fontsize = 15)
plt.plot(SerieTiempo['actual_gdp'])
plt.show()

# Gráfico de la serie logaritmica del PIB
plt.figure(figsize=(18,5))
plt.title('LPIB', fontsize = 15)
plt.plot(SerieTiempo['LPIB'])
plt.show()

SerieTiempo = SerieTiempo.dropna()

SerieTiempo

from statsmodels.tsa.stattools import adfuller
test_result=adfuller(SerieTiempo['actual_gdp'])
print(test_result)
#Ho: No - estacionariedad
#H1: Estacionariedad

def adfuller_test(actual_gdp):
    result=adfuller(actual_gdp)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
        print("Fuerte evidencia contra la hipetesis nula (Ho), se rechaza la hipotesis nula. La serie es estacionaria.")
    else:
        print("No hay evidencia estadistica para rechazar la hipotesis nula. La serie es no - estacionaria.")

adfuller_test(SerieTiempo['LPIB'])

model = pm.auto_arima(SerieTiempo.LPIB, start_p=1, start_q=1,
                      test='adf',       
                      max_p=3, max_q=3,
                      m=1,              
                      d=None,           
                      seasonal=False,   
                      start_P=0, 
                      D=0, 
                      trace=True,
                      error_action='ignore',  
                      suppress_warnings=True, 
                      stepwise=True)

print(model.summary())

# Diagnostico de la serie
import matplotlib.pyplot as plt
model.plot_diagnostics(figsize=(15,5))
plt.show()

# ARIMA CON EL ORDEN ÓPTIMO DETERMINADO PREVIAMENTE DADA LA MINIMIZACIÓN DEL AIC
ModeloARIMA012=sm.tsa.ARIMA(SerieTiempo['LPIB'], order = (3,1,1), freq='QS')
ResultadosARIMA012 = ModeloARIMA012.fit()
print(ResultadosARIMA012.summary())

# podemos dividir el conjunto de datos en conjuntos de train y test directamente (70-30)

X = SerieTiempo
X = X.astype('float32')

train_size = int(len(X) * 0.83)
train, test = X[0:train_size], X[train_size:]
train_size
train.shape, test.shape

plt.figure(figsize=(18,5))
plt.title('Train - Test', fontsize = 15)
plt.plot(train['LPIB'], label='train')
plt.plot(test['LPIB'], label='test')
plt.show()

# RESULTADOS
TSLA1DD = SerieTiempo.iloc[2:]
TSLA1DD

TSLA1DD['pronosticoSARIMA'] = ResultadosARIMA012.predict() 

plot = TSLA1DD[['LPIB', 'pronosticoSARIMA']].plot(figsize=(8,5))

TSLA1DD